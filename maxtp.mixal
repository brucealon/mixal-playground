***
* the main program
***
X           EQU     1000
RES         EQU     2000
* GNU MDK stores tapes at
* ~/.mdk/tapeTAPE.dev
TAPE        EQU     1
TERM        EQU     19
COUNT       EQU     100
* constants for results display
            ORIG    RES+100
VLABEL      ALF     VALUE
ILABEL      ALF     INDEX
ZEROES      ALF     00000
SPACE       ALF          
* begin
            ORIG    3000
START       IN      X(TAPE)      read the data
            JBUS    *(TAPE)
            JMP     COUNTER
            JMP     MAXIMUM      get the maximum
* print the value
            ENT1    RES          print from RES
            MOVE    VLABEL       set the label
            JMP     OUTPUT
* print the index
            ENT1    RES
            MOVE    ILABEL
* TO KNOW: is there a way to transfer directly from
* r2 to rA, or does it always have to go through a
* memory address?
            ST2     RES+1        get the index of the results
            LDA     RES+1
            JMP     OUTPUT
            HLT
***
* the counter subroutine
* set r1 to the index of the last non-zero value
***
COUNTER     STJ     2F
* make sure RES is zero
            ENT1    0
            ST1     RES
            ENT1    1
1H          LDA     X,1
            CMPA    RES
            JE      2F
            INC1    1
            JMP     1B
2H          JMP     *
***
* the output subroutine
* rA contains a number to print (converted by CHAR)
***
OUTPUT      STJ     1F
            CHAR
* there are only maximum five characters, so move
* them over to rA to use shift operations to change
* leading 30 (character 0) to 0 (character space).
            STX     RES+1
            LDA     RES+1
            CMPA    ZEROES(1:1)
            JNE     2F
* TO KNOW: is there a way to set A(x:x) to 0 directly?
* LDA wants to transfer in from a memory address and I
* think always slides in from the left, so trying to
* set just (5:5) will clear out (1:4).
            SLA     1
            SRA     1
            CMPA    ZEROES(2:2)
            JNE     2F
            SLA     2
            SRA     2
            CMPA    ZEROES(3:3)
            JNE     2F
            SLA     3
            SRA     3
            CMPA    ZEROES(4:4)
            JNE     2F
            SLA     4
            SRA     4
            CMPA    ZEROES(5:5)
            JNE     2F
            SLA     5
            SRA     5
2H          STA     RES+1
            OUT     RES(TERM)
            IOC     0(TERM)
1H          JMP     *
***
* the max subroutine
***
MAXIMUM     STJ     EXIT
INIT        ENT3    0,1
            JMP     CHANGEM
LOOP        CMPA    X,3
            JGE     *+3
CHANGEM     ENT2    0,3
            LDA     X,3
            DEC3    1
            J3P     LOOP
EXIT        JMP     *
            END     START
